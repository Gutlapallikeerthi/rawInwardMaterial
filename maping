 public virtual DbSet<RawInwardMaterial> RawInwardMaterials { get; set; }

 public virtual DbSet<RawInwardMaterialSub> RawInwardMaterialSubs { get; set; }

 modelBuilder.Entity<RawInwardMaterial>(entity =>
 {
     entity
    .HasKey(e => e.InMatId).HasName("PRIMARY");
     entity
         .ToTable("rawinwardmaterial");

     // Ensure Id is auto-incremented (this is usually the default behavior for primary keys)
     entity.Property(e => e.InMatId);
        

     entity.Property(e => e.InvDate).HasColumnType("datetime");
     entity.Property(e => e.InvNo).HasMaxLength(50);


     entity.HasIndex(e => e.InMatId, "InMatId").IsUnique();


     entity.Property(e => e.StoreAddId).HasDefaultValueSql("'0'"); 
     entity.Property(e => e.VendId).HasDefaultValueSql("'0'");
     entity.Property(e => e.POId).HasDefaultValueSql("'0'");
     entity.Property(e => e.StoreId).HasDefaultValueSql("'0'");

     entity.Property(e => e.GRNDate).HasColumnType("datetime");
     entity.Property(e => e.GRNNo).HasMaxLength(50);

     entity.HasMany(d => d.RawInwardMaterialSubs).WithOne(p => p.RawInwardMaterial)
    .HasForeignKey(p => p.InMatId)
    .OnDelete(DeleteBehavior.Cascade);

     entity.HasMany(d => d.Storeadds).WithOne(p => p.RawInwardMaterial)
   .HasForeignKey(p => p.InMatId)
   .OnDelete(DeleteBehavior.Cascade);


 });

 modelBuilder.Entity<RawInwardMaterialSub>(entity =>
 {
     entity.HasKey(e => e.InMatSubId).HasName("PRIMARY");
     entity.ToTable("rawinwardmaterialsub");


     entity.Property(e => e.ItemId).HasDefaultValueSql("'0'");

     entity.Property(e => e.Qty).HasDefaultValueSql("'0'");
   


     entity.Property(e => e.SlNo).HasDefaultValueSql("'0'");

     entity.Property(e => e.NoOfBags).HasDefaultValueSql("'0'");

     entity.Property(e => e.BatchNo).HasMaxLength(50);



 });       CreateMap<RawInwardMaterialCreateOnlyDto, RawInwardMaterial>()
.ForMember(dest => dest.InMatId, opt => opt.Ignore())
.ForMember(dest => dest.RawInwardMaterialSubs, opt => opt.Condition(src => src.RawInwardMaterialSubs != null))
.ForMember(dest => dest.Storeadds, opt => opt.Condition(src => src.Storeadds != null));

       CreateMap<RawInwardMaterial, RawInwardMaterialReadOnlyDto>();

       // Sub entity mappings
       CreateMap<RawInwardMaterialSubReadOnlyDto, RawInwardMaterialSub>()
           .ForMember(dest => dest.InMatSubId, opt => opt.Ignore())
           .ForMember(dest => dest.InMatId, opt => opt.Ignore())
           .ForMember(dest => dest.RawInwardMaterial, opt => opt.Ignore());

       CreateMap<RawInwardMaterialSub, RawInwardMaterialSubReadOnlyDto>();

       // Store mappings
       CreateMap<StoreAddReadOnlyDto, Storeadd>()
           .ForMember(dest => dest.StoreAddId, opt => opt.Ignore())
           .ForMember(dest => dest.InMatId, opt => opt.Ignore())
           .ForMember(dest => dest.RawInwardMaterial, opt => opt.Ignore());

       CreateMap<Storeadd, StoreAddReadOnlyDto>();

       // Store sub mappings
       CreateMap<StoreAddSubReadOnlyDto, Storeaddsub>()
           .ForMember(dest => dest.StoreAddId, opt => opt.Ignore())
           .ForMember(dest => dest.Storeadd, opt => opt.Ignore());

       CreateMap<Storeaddsub, StoreAddSubReadOnlyDto>();

 modelBuilder.Entity<Storeadd>(entity =>
 {
     entity
    .HasKey(e => e.StoreAddId).HasName("PRIMARY");
     entity
         .ToTable("storeadd");
  
     entity.Property(e => e.StoreAddDate)
         .HasColumnType("datetime")
         .HasColumnName("StoreAddDate");
     entity.Property(e => e.StoreAddNo)
         .HasDefaultValueSql("'0'")
         .HasColumnName("StoreAddNo");
     entity.Property(e => e.StoreId).HasDefaultValueSql("'0'");
     entity.Property(e => e.Source).HasDefaultValueSql("'0'");
     entity.Property(e => e.RefDocId).HasDefaultValueSql("'0'");
    

     entity.HasMany(d => d.Storeaddsubs).WithOne(p => p.Storeadd)
    .HasForeignKey(p => p.StoreAddId)
    .OnDelete(DeleteBehavior.Restrict);
 });

 modelBuilder.Entity<Storeaddsub>(entity =>
 {
     entity
   .HasKey(e => e.storeAddSubId).HasName("PRIMARY");
     entity
         .ToTable("storeaddsub");

     entity.HasIndex(e => e.SlNo, "SlNo");

     entity.Property(e => e.Trak)
     .HasDefaultValueSql("NULL");

     entity.Property(e => e.BagNo).HasDefaultValueSql("'0'");
     entity.Property(e => e.BalQty).HasDefaultValueSql("'0'");
     
     

     entity.Property(e => e.ItemId).HasDefaultValueSql("'0'");
     entity.Property(e => e.Qty).HasDefaultValueSql("'0'");

     
     entity.Property(e => e.SlNo).HasDefaultValueSql("'0'");
     
 });
 public virtual DbSet<Storeadd> Storeadds { get; set; }

 public virtual DbSet<Storeaddsub> Storeaddsubs { get; set; }
